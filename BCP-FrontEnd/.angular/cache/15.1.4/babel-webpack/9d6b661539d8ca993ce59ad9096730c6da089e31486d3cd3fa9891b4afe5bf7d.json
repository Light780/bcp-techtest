{"ast":null,"code":"import { BehaviorSubject, ReplaySubject } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./\";\nconst initialValue = {\n  correo: '',\n  nombreCompleto: '',\n  token: ''\n};\nexport class UsuarioService {\n  constructor(apiService, jwtService) {\n    this.apiService = apiService;\n    this.jwtService = jwtService;\n    this.currentUserSubject = new BehaviorSubject(initialValue);\n    this.currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n    this.isAuthenticatedSubject = new ReplaySubject(1);\n    this.isAuthenticated = this.isAuthenticatedSubject.asObservable();\n  }\n  populate() {\n    this.apiService.get('usuario').subscribe({\n      next: response => {\n        this.setAuth(response.data);\n      },\n      error: _ => {\n        this.purgeAuth();\n      }\n    });\n  }\n  setAuth(usuario) {\n    this.jwtService.setToken(usuario.token);\n    this.currentUserSubject.next(usuario);\n    this.isAuthenticatedSubject.next(true);\n  }\n  purgeAuth() {\n    this.jwtService.deleteToken();\n    this.currentUserSubject.next(initialValue);\n    this.isAuthenticatedSubject.next(false);\n  }\n  attemptAuth(type, request) {\n    const route = type === 'login' ? '/login' : '/register';\n    return this.apiService.post('usuario' + route, {\n      request\n    }).pipe(map(response => {\n      this.setAuth(response.data);\n      return response.data;\n    }));\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n}\nUsuarioService.ɵfac = function UsuarioService_Factory(t) {\n  return new (t || UsuarioService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i1.JwtService));\n};\nUsuarioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioService,\n  factory: UsuarioService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAqBA,eAAe,EAAEC,aAAa,QAAQ,MAAM;AACjE,SAASC,GAAG,EAAEC,oBAAoB,QAAQ,gBAAgB;;;AAI1D,MAAMC,YAAY,GAAyB;EACzCC,MAAM,EAAE,EAAE;EACVC,cAAc,EAAE,EAAE;EAClBC,KAAK,EAAE;CACR;AAGD,OAAM,MAAOC,cAAc;EAOzBC,YACmBC,UAAsB,EACtBC,UAAsB;IADtB,eAAU,GAAVD,UAAU;IACV,eAAU,GAAVC,UAAU;IARZ,uBAAkB,GAAG,IAAIX,eAAe,CAAuBI,YAAY,CAAC;IACtF,gBAAW,GAAG,IAAI,CAACQ,kBAAkB,CAACC,YAAY,EAAE,CAACC,IAAI,CAACX,oBAAoB,EAAE,CAAC;IAEvE,2BAAsB,GAAG,IAAIF,aAAa,CAAU,CAAC,CAAC;IAChE,oBAAe,GAAG,IAAI,CAACc,sBAAsB,CAACF,YAAY,EAAE;EAKhE;EAEHG,QAAQ;IACN,IAAI,CAACN,UAAU,CAACO,GAAG,CAAuB,SAAS,CAAC,CACjDC,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACC,OAAO,CAACD,QAAQ,CAACE,IAAI,CAAC;MAC7B,CAAC;MACDC,KAAK,EAAGC,CAAC,IAAI;QACX,IAAI,CAACC,SAAS,EAAE;MAClB;KACD,CAAC;EACN;EAEAJ,OAAO,CAAEK,OAA6B;IACpC,IAAI,CAACf,UAAU,CAACgB,QAAQ,CAACD,OAAO,CAACnB,KAAK,CAAC;IACvC,IAAI,CAACK,kBAAkB,CAACO,IAAI,CAACO,OAAO,CAAC;IACrC,IAAI,CAACX,sBAAsB,CAACI,IAAI,CAAC,IAAI,CAAC;EACxC;EAEAM,SAAS;IACP,IAAI,CAACd,UAAU,CAACiB,WAAW,EAAE;IAC7B,IAAI,CAAChB,kBAAkB,CAACO,IAAI,CAACf,YAAY,CAAC;IAC1C,IAAI,CAACW,sBAAsB,CAACI,IAAI,CAAC,KAAK,CAAC;EACzC;EAEAU,WAAW,CAAEC,IAAY,EAAEC,OAAY;IACrC,MAAMC,KAAK,GAAIF,IAAI,KAAK,OAAO,GAAI,QAAQ,GAAG,WAAW;IACzD,OAAO,IAAI,CAACpB,UAAU,CAACuB,IAAI,CAAuB,SAAS,GAAGD,KAAK,EAAE;MAAED;IAAO,CAAE,CAAC,CAC9EjB,IAAI,CAACZ,GAAG,CACPkB,QAAQ,IAAG;MACT,IAAI,CAACC,OAAO,CAACD,QAAQ,CAACE,IAAI,CAAC;MAC3B,OAAOF,QAAQ,CAACE,IAAI;IACtB,CAAC,CACF,CAAC;EACN;EAEAY,cAAc;IACZ,OAAO,IAAI,CAACtB,kBAAkB,CAACuB,KAAK;EACtC;;AAjDW3B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA4B,SAAd5B,cAAc;AAAA","names":["BehaviorSubject","ReplaySubject","map","distinctUntilChanged","initialValue","correo","nombreCompleto","token","UsuarioService","constructor","apiService","jwtService","currentUserSubject","asObservable","pipe","isAuthenticatedSubject","populate","get","subscribe","next","response","setAuth","data","error","_","purgeAuth","usuario","setToken","deleteToken","attemptAuth","type","request","route","post","getCurrentUser","value","factory"],"sourceRoot":"","sources":["F:\\Development\\Technical Test\\BCP\\BCP-FrontEnd\\src\\app\\core\\services\\usuario.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core'\r\nimport { Observable, BehaviorSubject, ReplaySubject } from 'rxjs'\r\nimport { map, distinctUntilChanged } from 'rxjs/operators'\r\nimport { LoginUsuarioResponse } from '../models'\r\nimport { ApiService, JwtService } from './'\r\n\r\nconst initialValue: LoginUsuarioResponse = {\r\n  correo: '',\r\n  nombreCompleto: '',\r\n  token: ''\r\n}\r\n\r\n@Injectable()\r\nexport class UsuarioService {\r\n  private readonly currentUserSubject = new BehaviorSubject<LoginUsuarioResponse>(initialValue)\r\n  public currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged())\r\n\r\n  private readonly isAuthenticatedSubject = new ReplaySubject<boolean>(1)\r\n  public isAuthenticated = this.isAuthenticatedSubject.asObservable()\r\n\r\n  constructor (\r\n    private readonly apiService: ApiService,\r\n    private readonly jwtService: JwtService\r\n  ) {}\r\n\r\n  populate (): void {\r\n    this.apiService.get<LoginUsuarioResponse>('usuario')\r\n      .subscribe({\r\n        next: (response) => {\r\n          this.setAuth(response.data)\r\n        },\r\n        error: (_) => {\r\n          this.purgeAuth()\r\n        }\r\n      })\r\n  }\r\n\r\n  setAuth (usuario: LoginUsuarioResponse): void {\r\n    this.jwtService.setToken(usuario.token)\r\n    this.currentUserSubject.next(usuario)\r\n    this.isAuthenticatedSubject.next(true)\r\n  }\r\n\r\n  purgeAuth (): void {\r\n    this.jwtService.deleteToken()\r\n    this.currentUserSubject.next(initialValue)\r\n    this.isAuthenticatedSubject.next(false)\r\n  }\r\n\r\n  attemptAuth (type: string, request: any): Observable<LoginUsuarioResponse> {\r\n    const route = (type === 'login') ? '/login' : '/register'\r\n    return this.apiService.post<LoginUsuarioResponse>('usuario' + route, { request })\r\n      .pipe(map(\r\n        response => {\r\n          this.setAuth(response.data)\r\n          return response.data\r\n        }\r\n      ))\r\n  }\r\n\r\n  getCurrentUser (): LoginUsuarioResponse {\r\n    return this.currentUserSubject.value\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}