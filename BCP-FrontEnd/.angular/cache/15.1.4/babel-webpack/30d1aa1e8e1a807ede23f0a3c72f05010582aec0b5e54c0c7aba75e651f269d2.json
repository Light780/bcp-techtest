{"ast":null,"code":"import { environment } from '../../../environments/enviroment';\nimport { HttpParams } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  showErrors(error) {\n    Swal.fire({\n      title: 'Ocurrio un error',\n      text: error.message + \"\\n\" + error.errors?.forEach(message => \"\"),\n      icon: 'error'\n    }).then().catch(() => {});\n    return throwError(() => error.message);\n  }\n  showMessage(response) {\n    Swal.fire({\n      title: 'Operacion exitosa',\n      text: response.message,\n      icon: 'error'\n    }).then().catch(() => {});\n    return throwError(() => error.message);\n  }\n  get(path, params = new HttpParams()) {\n    return this.http.get(`${environment.api_url}${path}`, {\n      params\n    }).subscribe({\n      next: response => {},\n      error: error => {}\n    }).pipe(catchError(this.showErrors));\n  }\n  put(path, body = {}) {\n    return this.http.put(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.showErrors));\n  }\n  post(path, body = {}) {\n    return this.http.post(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.showErrors));\n  }\n  delete(path) {\n    return this.http.delete(`${environment.api_url}${path}`).pipe(catchError(this.showErrors));\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAQA,WAAW,QAAO,kCAAkC;AAC5D,SAAoBC,UAAU,QAAO,sBAAsB;AAC3D,SAAQC,UAAU,EAAcC,UAAU,QAAO,MAAM;AACvD,OAAOC,IAAI,MAAM,aAAa;;;AAI9B,OAAM,MAAOC,UAAU;EACrBC,YACmBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAEvB;EAEQC,UAAU,CAACC,KAAuB;IACxCL,IAAI,CAACM,IAAI,CAAC;MACRC,KAAK,EAAE,kBAAkB;MACzBC,IAAI,EAAEH,KAAK,CAACI,OAAO,GAAG,IAAI,GAAGJ,KAAK,CAACK,MAAM,EAAEC,OAAO,CAACF,OAAO,IAAI,EAAE,CAAC;MACjEG,IAAI,EAAE;KACP,CAAC,CAACC,IAAI,EAAE,CAACC,KAAK,CAAC,MAAK,CACrB,CAAC,CAAC;IAEF,OAAOf,UAAU,CAAC,MAAMM,KAAK,CAACI,OAAO,CAAC;EACxC;EAEQM,WAAW,CAACC,QAAuB;IACzChB,IAAI,CAACM,IAAI,CAAC;MACRC,KAAK,EAAE,mBAAmB;MAC1BC,IAAI,EAAEQ,QAAQ,CAACP,OAAO;MACtBG,IAAI,EAAE;KACP,CAAC,CAACC,IAAI,EAAE,CAACC,KAAK,CAAC,MAAK,CACrB,CAAC,CAAC;IAEF,OAAOf,UAAU,CAAC,MAAMM,KAAK,CAACI,OAAO,CAAC;EACxC;EAEAQ,GAAG,CAAIC,IAAY,EAAEC,SAAqB,IAAItB,UAAU,EAAE;IACxD,OAAO,IAAI,CAACM,IAAI,CACbc,GAAG,CAAc,GAAGrB,WAAW,CAACwB,OAAO,GAAGF,IAAI,EAAE,EAAE;MAACC;IAAM,CAAC,CAAC,CAC3DE,SAAS,CAAC;MACTC,IAAI,EAAGN,QAAQ,IAAI,CAEnB,CAAC;MACDX,KAAK,EAAGA,KAAuB,IAAI,CAEnC;KACD,CAAC,CACDkB,IAAI,CAACzB,UAAU,CAAC,IAAI,CAACM,UAAU,CAAC,CAAC;EACtC;EAEAoB,GAAG,CAAIN,IAAY,EAAEO,OAAe,EAAE;IACpC,OAAO,IAAI,CAACtB,IAAI,CAACqB,GAAG,CAClB,GAAG5B,WAAW,CAACwB,OAAO,GAAGF,IAAI,EAAE,EAC/BQ,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CACrB,CAACF,IAAI,CAACzB,UAAU,CAAC,IAAI,CAACM,UAAU,CAAC,CAAC;EACrC;EAEAwB,IAAI,CAAIV,IAAY,EAAEO,OAAe,EAAE;IACrC,OAAO,IAAI,CAACtB,IAAI,CAACyB,IAAI,CACnB,GAAGhC,WAAW,CAACwB,OAAO,GAAGF,IAAI,EAAE,EAC/BQ,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CACrB,CAACF,IAAI,CAACzB,UAAU,CAAC,IAAI,CAACM,UAAU,CAAC,CAAC;EACrC;EAEAyB,MAAM,CAACX,IAAY;IACjB,OAAO,IAAI,CAACf,IAAI,CAAC0B,MAAM,CACrB,GAAGjC,WAAW,CAACwB,OAAO,GAAGF,IAAI,EAAE,CAChC,CAACK,IAAI,CAACzB,UAAU,CAAC,IAAI,CAACM,UAAU,CAAC,CAAC;EACrC;;AA5DWH,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAA6B,SAAV7B,UAAU;AAAA","names":["environment","HttpParams","catchError","throwError","Swal","ApiService","constructor","http","showErrors","error","fire","title","text","message","errors","forEach","icon","then","catch","showMessage","response","get","path","params","api_url","subscribe","next","pipe","put","body","JSON","stringify","post","delete","factory"],"sourceRoot":"","sources":["F:\\Development\\Technical Test\\BCP\\BCP-FrontEnd\\src\\app\\core\\services\\api.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core'\r\nimport {environment} from '../../../environments/enviroment'\r\nimport {HttpClient, HttpParams} from '@angular/common/http'\r\nimport {catchError, Observable, throwError} from 'rxjs'\r\nimport Swal from 'sweetalert2'\r\nimport {Response} from '../models'\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n  constructor(\r\n    private readonly http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  private showErrors(error: Response<string>): Observable<never> {\r\n    Swal.fire({\r\n      title: 'Ocurrio un error',\r\n      text: error.message + \"\\n\" + error.errors?.forEach(message => \"\"),\r\n      icon: 'error'\r\n    }).then().catch(() => {\r\n    })\r\n\r\n    return throwError(() => error.message)\r\n  }\r\n\r\n  private showMessage(response: Response<any>): Observable<never> {\r\n    Swal.fire({\r\n      title: 'Operacion exitosa',\r\n      text: response.message,\r\n      icon: 'error'\r\n    }).then().catch(() => {\r\n    })\r\n\r\n    return throwError(() => error.message)\r\n  }\r\n\r\n  get<T>(path: string, params: HttpParams = new HttpParams()): Observable<Response<T>> {\r\n    return this.http\r\n      .get<Response<T>>(`${environment.api_url}${path}`, {params})\r\n      .subscribe({\r\n        next: (response) => {\r\n\r\n        },\r\n        error: (error: Response<string>) => {\r\n\r\n        }\r\n      })\r\n      .pipe(catchError(this.showErrors))\r\n  }\r\n\r\n  put<T>(path: string, body: Object = {}): Observable<Response<T>> {\r\n    return this.http.put<Response<T>>(\r\n      `${environment.api_url}${path}`,\r\n      JSON.stringify(body)\r\n    ).pipe(catchError(this.showErrors))\r\n  }\r\n\r\n  post<T>(path: string, body: Object = {}): Observable<Response<T>> {\r\n    return this.http.post<Response<T>>(\r\n      `${environment.api_url}${path}`,\r\n      JSON.stringify(body)\r\n    ).pipe(catchError(this.showErrors))\r\n  }\r\n\r\n  delete(path: string): Observable<Response<string>> {\r\n    return this.http.delete<Response<string>>(\r\n      `${environment.api_url}${path}`\r\n    ).pipe(catchError(this.showErrors))\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}