{"ast":null,"code":"import { BehaviorSubject, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./\";\nconst initialValue = {\n  correo: '',\n  nombreCompleto: '',\n  token: ''\n};\nexport class UsuarioService {\n  constructor(apiService, jwtService) {\n    this.apiService = apiService;\n    this.jwtService = jwtService;\n    this.currentUserSubject = new BehaviorSubject(initialValue);\n    this.currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n    this.isAuthenticatedSubject = new ReplaySubject(1);\n    this.isAuthenticated = this.isAuthenticatedSubject.asObservable();\n  }\n  populate() {\n    if (this.jwtService.getToken() !== undefined) {\n      this.apiService.get('usuario').subscribe({\n        next: response => {\n          this.setAuth(response);\n        },\n        error: _ => {\n          this.purgeAuth();\n        }\n      });\n    } else {\n      this.purgeAuth();\n    }\n  }\n  setAuth(usuario) {\n    this.jwtService.setToken(usuario.token);\n    this.currentUserSubject.next(usuario);\n    this.isAuthenticatedSubject.next(true);\n  }\n  purgeAuth() {\n    this.jwtService.deleteToken();\n    this.currentUserSubject.next(initialValue);\n    this.isAuthenticatedSubject.next(false);\n  }\n  attemptAuth(type, request) {\n    const route = type === 'login' ? '/login' : '/register';\n    return this.apiService.post('usuario' + route, request).pipe(map(response => {\n      this.setAuth(response);\n      return response;\n    }));\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n}\nUsuarioService.ɵfac = function UsuarioService_Factory(t) {\n  return new (t || UsuarioService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i1.JwtService));\n};\nUsuarioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioService,\n  factory: UsuarioService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAQA,eAAe,EAAcC,aAAa,QAAO,MAAM;AAC/D,SAAQC,oBAAoB,EAAEC,GAAG,QAAO,gBAAgB;;;AAIxD,MAAMC,YAAY,GAAyB;EACzCC,MAAM,EAAE,EAAE;EACVC,cAAc,EAAE,EAAE;EAClBC,KAAK,EAAE;CACR;AAGD,OAAM,MAAOC,cAAc;EAOzBC,YACmBC,UAAsB,EACtBC,UAAsB;IADtB,eAAU,GAAVD,UAAU;IACV,eAAU,GAAVC,UAAU;IARZ,uBAAkB,GAAG,IAAIX,eAAe,CAAuBI,YAAY,CAAC;IACtF,gBAAW,GAAG,IAAI,CAACQ,kBAAkB,CAACC,YAAY,EAAE,CAACC,IAAI,CAACZ,oBAAoB,EAAE,CAAC;IAEvE,2BAAsB,GAAG,IAAID,aAAa,CAAU,CAAC,CAAC;IAChE,oBAAe,GAAG,IAAI,CAACc,sBAAsB,CAACF,YAAY,EAAE;EAMnE;EAEAG,QAAQ;IACN,IAAI,IAAI,CAACL,UAAU,CAACM,QAAQ,EAAE,KAAKC,SAAS,EAAE;MAE5C,IAAI,CAACR,UAAU,CAACS,GAAG,CAAuB,SAAS,CAAC,CACjDC,SAAS,CAAC;QACTC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAI,CAACC,OAAO,CAACD,QAAQ,CAAC;QACxB,CAAC;QACDE,KAAK,EAAGC,CAAC,IAAI;UACX,IAAI,CAACC,SAAS,EAAE;QAClB;OACD,CAAC;KACL,MAAM;MACL,IAAI,CAACA,SAAS,EAAE;;EAEpB;EAEAH,OAAO,CAACI,OAA6B;IACnC,IAAI,CAAChB,UAAU,CAACiB,QAAQ,CAACD,OAAO,CAACpB,KAAK,CAAC;IACvC,IAAI,CAACK,kBAAkB,CAACS,IAAI,CAACM,OAAO,CAAC;IACrC,IAAI,CAACZ,sBAAsB,CAACM,IAAI,CAAC,IAAI,CAAC;EACxC;EAEAK,SAAS;IACP,IAAI,CAACf,UAAU,CAACkB,WAAW,EAAE;IAC7B,IAAI,CAACjB,kBAAkB,CAACS,IAAI,CAACjB,YAAY,CAAC;IAC1C,IAAI,CAACW,sBAAsB,CAACM,IAAI,CAAC,KAAK,CAAC;EACzC;EAEAS,WAAW,CAACC,IAAY,EAAEC,OAAY;IACpC,MAAMC,KAAK,GAAIF,IAAI,KAAK,OAAO,GAAI,QAAQ,GAAG,WAAW;IACzD,OAAO,IAAI,CAACrB,UAAU,CAACwB,IAAI,CAAuB,SAAS,GAAGD,KAAK,EAAED,OAAO,CAAC,CAC1ElB,IAAI,CAACX,GAAG,CACPmB,QAAQ,IAAG;MACT,IAAI,CAACC,OAAO,CAACD,QAAQ,CAAC;MACtB,OAAOA,QAAQ;IACjB,CAAC,CACF,CAAC;EACN;EAEAa,cAAc;IACZ,OAAO,IAAI,CAACvB,kBAAkB,CAACwB,KAAK;EACtC;;AAvDW5B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA6B,SAAd7B,cAAc;AAAA","names":["BehaviorSubject","ReplaySubject","distinctUntilChanged","map","initialValue","correo","nombreCompleto","token","UsuarioService","constructor","apiService","jwtService","currentUserSubject","asObservable","pipe","isAuthenticatedSubject","populate","getToken","undefined","get","subscribe","next","response","setAuth","error","_","purgeAuth","usuario","setToken","deleteToken","attemptAuth","type","request","route","post","getCurrentUser","value","factory"],"sourceRoot":"","sources":["F:\\Development\\Technical Test\\BCP\\BCP-FrontEnd\\src\\app\\core\\services\\usuario.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core'\r\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs'\r\nimport {distinctUntilChanged, map} from 'rxjs/operators'\r\nimport {LoginUsuarioResponse} from '../models'\r\nimport {ApiService, JwtService} from './'\r\n\r\nconst initialValue: LoginUsuarioResponse = {\r\n  correo: '',\r\n  nombreCompleto: '',\r\n  token: ''\r\n}\r\n\r\n@Injectable()\r\nexport class UsuarioService {\r\n  private readonly currentUserSubject = new BehaviorSubject<LoginUsuarioResponse>(initialValue)\r\n  public currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged())\r\n\r\n  private readonly isAuthenticatedSubject = new ReplaySubject<boolean>(1)\r\n  public isAuthenticated = this.isAuthenticatedSubject.asObservable()\r\n\r\n  constructor(\r\n    private readonly apiService: ApiService,\r\n    private readonly jwtService: JwtService\r\n  ) {\r\n  }\r\n\r\n  populate(): void {\r\n    if (this.jwtService.getToken() !== undefined) {\r\n\r\n      this.apiService.get<LoginUsuarioResponse>('usuario')\r\n        .subscribe({\r\n          next: (response) => {\r\n            this.setAuth(response)\r\n          },\r\n          error: (_) => {\r\n            this.purgeAuth()\r\n          }\r\n        })\r\n    } else {\r\n      this.purgeAuth()\r\n    }\r\n  }\r\n\r\n  setAuth(usuario: LoginUsuarioResponse): void {\r\n    this.jwtService.setToken(usuario.token)\r\n    this.currentUserSubject.next(usuario)\r\n    this.isAuthenticatedSubject.next(true)\r\n  }\r\n\r\n  purgeAuth(): void {\r\n    this.jwtService.deleteToken()\r\n    this.currentUserSubject.next(initialValue)\r\n    this.isAuthenticatedSubject.next(false)\r\n  }\r\n\r\n  attemptAuth(type: string, request: any): Observable<LoginUsuarioResponse> {\r\n    const route = (type === 'login') ? '/login' : '/register'\r\n    return this.apiService.post<LoginUsuarioResponse>('usuario' + route, request)\r\n      .pipe(map(\r\n        response => {\r\n          this.setAuth(response)\r\n          return response\r\n        }\r\n      ))\r\n  }\r\n\r\n  getCurrentUser(): LoginUsuarioResponse {\r\n    return this.currentUserSubject.value\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}