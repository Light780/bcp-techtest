{"ast":null,"code":"import { map } from \"rxjs\";\nimport { take } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../core\";\nexport class NoAuthGuard {\n  constructor(route, usuarioService) {\n    this.route = route;\n    this.usuarioService = usuarioService;\n  }\n  canActivate(route, state) {\n    return this.usuarioService.isAuthenticated.pipe(take(1), map(isAuth => !isAuth));\n  }\n}\nNoAuthGuard.ɵfac = function NoAuthGuard_Factory(t) {\n  return new (t || NoAuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.UsuarioService));\n};\nNoAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NoAuthGuard,\n  factory: NoAuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,GAAG,QAAmB,MAAM;AAEpC,SAAQC,IAAI,QAAO,gBAAgB;;;;AAKnC,OAAM,MAAOC,WAAW;EAEtBC,YACUC,KAAa,EACbC,cAA8B;IAD9B,UAAK,GAALD,KAAK;IACL,mBAAc,GAAdC,cAAc;EACpB;EAEJC,WAAW,CAACF,KAA6B,EAAEG,KAA0B;IACnE,OAAO,IAAI,CAACF,cAAc,CAACG,eAAe,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,EAAED,GAAG,CAACU,MAAM,IAAI,CAACA,MAAM,CAAC,CAAC;EAClF;;AATWR,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAS,SAAXT,WAAW;EAAAU,YAFV;AAAM","names":["map","take","NoAuthGuard","constructor","route","usuarioService","canActivate","state","isAuthenticated","pipe","isAuth","factory","providedIn"],"sourceRoot":"","sources":["F:\\Development\\Technical Test\\BCP\\BCP-FrontEnd\\src\\app\\auth\\services\\no-auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from \"@angular/router\";\nimport {map, Observable} from \"rxjs\";\nimport {UsuarioService} from \"../../core\";\nimport {take} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoAuthGuard implements CanActivate{\n\n  constructor(\n    private route: Router,\n    private usuarioService: UsuarioService\n  ) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.usuarioService.isAuthenticated.pipe(take(1), map(isAuth => !isAuth))\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}