{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services\";\nexport class HttpTokenInterceptor {\n  constructor(jwtService) {\n    this.jwtService = jwtService;\n  }\n  intercept(req, next) {\n    const headerConfig = {\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    };\n    const token = this.jwtService.getToken();\n    if (token !== undefined) {\n      headerConfig.Authorization = `Bearer ${token}`;\n    }\n    const request = req.clone({\n      setHeaders: headerConfig\n    });\n    return next.handle(request);\n  }\n}\nHttpTokenInterceptor.ɵfac = function HttpTokenInterceptor_Factory(t) {\n  return new (t || HttpTokenInterceptor)(i0.ɵɵinject(i1.JwtService));\n};\nHttpTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpTokenInterceptor,\n  factory: HttpTokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,oBAAoB;EAC/BC,YACmBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EACzB;EAEJC,SAAS,CAAEC,GAAqB,EAAEC,IAAiB;IACjD,MAAMC,YAAY,GAAQ;MACxB,cAAc,EAAE,kBAAkB;MAClCC,MAAM,EAAE;KACT;IAED,MAAMC,KAAK,GAAG,IAAI,CAACN,UAAU,CAACO,QAAQ,EAAE;IAExC,IAAID,KAAK,KAAKE,SAAS,EAAE;MACvBJ,YAAY,CAACK,aAAa,GAAG,UAAUH,KAAK,EAAE;;IAGhD,MAAMI,OAAO,GAAGR,GAAG,CAACS,KAAK,CAAC;MAAEC,UAAU,EAAER;IAAY,CAAE,CAAC;IACvD,OAAOD,IAAI,CAACU,MAAM,CAACH,OAAO,CAAC;EAC7B;;AAnBWZ,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAgB,SAApBhB,oBAAoB;AAAA","names":["HttpTokenInterceptor","constructor","jwtService","intercept","req","next","headerConfig","Accept","token","getToken","undefined","Authorization","request","clone","setHeaders","handle","factory"],"sourceRoot":"","sources":["F:\\Development\\Technical Test\\BCP\\BCP-FrontEnd\\src\\app\\core\\interceptors\\http.token.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http'\r\nimport { Injectable } from '@angular/core'\r\nimport { Observable } from 'rxjs'\r\nimport { JwtService } from '../services'\r\n\r\n@Injectable()\r\nexport class HttpTokenInterceptor implements HttpInterceptor {\r\n  constructor (\r\n    private readonly jwtService: JwtService\r\n  ) { }\r\n\r\n  intercept (req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const headerConfig: any = {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json'\r\n    }\r\n\r\n    const token = this.jwtService.getToken()\r\n\r\n    if (token !== undefined) {\r\n      headerConfig.Authorization = `Bearer ${token}`\r\n    }\r\n\r\n    const request = req.clone({ setHeaders: headerConfig })\r\n    return next.handle(request)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}