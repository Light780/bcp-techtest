{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from \"@angular/forms\";\nlet AuthComponent = class AuthComponent {\n  constructor(route, router, usuarioService, fb) {\n    this.route = route;\n    this.router = router;\n    this.usuarioService = usuarioService;\n    this.fb = fb;\n    this.authType = '';\n    this.title = '';\n    this.buttonText = '';\n    this.isSubmitting = false;\n    this.authForm = this.fb.group({\n      'correo': ['', Validators.required, Validators.email],\n      'password': ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.route.url.subscribe(data => {\n      this.authType = data[data.length - 1].path;\n      this.title = this.authType === \"login\" ? \"Login\" : \"Crear Cuenta\";\n      this.buttonText = this.authType === \"login\" ? \"Ingresar\" : \"Crear Cuenta\";\n      if (this.authType === \"register\") {\n        this.authForm.controls['correo'].setValidators([Validators.minLength(8), Validators.maxLength(50)]);\n        this.authForm.controls['password'].setValidators([Validators.minLength(8), Validators.maxLength(32)]);\n        this.authForm.addControl(\"nombreCompleto\", new FormControl('', [Validators.minLength(8), Validators.maxLength(50)]));\n      }\n    });\n  }\n  submitForm() {\n    this.isSubmitting = true;\n    const credentials = this.authForm.value;\n    this.usuarioService.attemptAuth(this.authType, credentials).subscribe({\n      next: response => {\n        this.router.navigateByUrl('/');\n      },\n      error: error => this.isSubmitting = false\n    });\n  }\n};\nAuthComponent = __decorate([Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})], AuthComponent);\nexport { AuthComponent };","map":{"version":3,"mappings":";AAAA,SAAQA,SAAS,QAAe,eAAe;AAG/C,SAAqBC,WAAW,EAAaC,UAAU,QAAO,gBAAgB;AAOvE,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAQxBC,YACmBC,KAAqB,EACrBC,MAAc,EACdC,cAA8B,EAC9BC,EAAe;IAHf,UAAK,GAALH,KAAK;IACL,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IACd,OAAE,GAAFC,EAAE;IAVrB,aAAQ,GAAW,EAAE;IACrB,UAAK,GAAW,EAAE;IAClB,eAAU,GAAW,EAAE;IAEvB,iBAAY,GAAG,KAAK;IAQlB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAC5B,QAAQ,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACU,KAAK,CAAC;MACrD,UAAU,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ;KACrC,CAAC;EACJ;EAEAE,QAAQ;IACN,IAAI,CAACR,KAAK,CAACS,GAAG,CAACC,SAAS,CAACC,IAAI,IAAG;MAC9B,IAAI,CAACC,QAAQ,GAAGD,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,CAACC,IAAI;MAC1C,IAAI,CAACC,KAAK,GAAG,IAAI,CAACH,QAAQ,KAAK,OAAO,GAAG,OAAO,GAAG,cAAc;MACjE,IAAI,CAACI,UAAU,GAAG,IAAI,CAACJ,QAAQ,KAAK,OAAO,GAAG,UAAU,GAAG,cAAc;MACzE,IAAI,IAAI,CAACA,QAAQ,KAAK,UAAU,EAAE;QAChC,IAAI,CAACR,QAAQ,CAACa,QAAQ,CAAC,QAAQ,CAAC,CAACC,aAAa,CAAC,CAC7CrB,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,EACvBtB,UAAU,CAACuB,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC;QAEF,IAAI,CAAChB,QAAQ,CAACa,QAAQ,CAAC,UAAU,CAAC,CAACC,aAAa,CAAC,CAC/CrB,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,EACvBtB,UAAU,CAACuB,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC;QAEF,IAAI,CAAChB,QAAQ,CAACiB,UAAU,CAAC,gBAAgB,EAAE,IAAIzB,WAAW,CAAC,EAAE,EAAE,CAC7DC,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,EACvBtB,UAAU,CAACuB,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC,CAAC;;IAGP,CAAC,CAAC;EACJ;EAEAE,UAAU;IACR,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,MAAMC,WAAW,GAAG,IAAI,CAACpB,QAAQ,CAACqB,KAAK;IACvC,IAAI,CAACvB,cAAc,CAChBwB,WAAW,CAAC,IAAI,CAACd,QAAQ,EAAEY,WAAW,CAAC,CACvCd,SAAS,CAAC;MACPiB,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAAC3B,MAAM,CAAC4B,aAAa,CAAC,GAAG,CAAC;MAChC,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAK,IAAI,CAACP,YAAY,GAAG;KACvC,CACF;EACL;CAED;AA3DYzB,aAAa,eALzBH,SAAS,CAAC;EACToC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWnC,aAAa,CA2DzB;SA3DYA,aAAa","names":["Component","FormControl","Validators","AuthComponent","constructor","route","router","usuarioService","fb","authForm","group","required","email","ngOnInit","url","subscribe","data","authType","length","path","title","buttonText","controls","setValidators","minLength","maxLength","addControl","submitForm","isSubmitting","credentials","value","attemptAuth","next","response","navigateByUrl","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\Development\\Technical Test\\BCP\\BCP-FrontEnd\\src\\app\\auth\\pages\\auth.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {UsuarioService} from \"../../core\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class AuthComponent implements OnInit {\n\n  authType: string = ''\n  title: string = ''\n  buttonText: string = ''\n  authForm: FormGroup\n  isSubmitting = false;\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly usuarioService: UsuarioService,\n    private readonly fb: FormBuilder\n  ) {\n    this.authForm = this.fb.group({\n      'correo': ['', Validators.required, Validators.email],\n      'password': ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.url.subscribe(data => {\n      this.authType = data[data.length - 1].path\n      this.title = this.authType === \"login\" ? \"Login\" : \"Crear Cuenta\"\n      this.buttonText = this.authType === \"login\" ? \"Ingresar\" : \"Crear Cuenta\"\n      if (this.authType === \"register\") {\n        this.authForm.controls['correo'].setValidators([\n          Validators.minLength(8),\n          Validators.maxLength(50)\n        ])\n\n        this.authForm.controls['password'].setValidators([\n          Validators.minLength(8),\n          Validators.maxLength(32),\n        ])\n\n        this.authForm.addControl(\"nombreCompleto\", new FormControl('', [\n          Validators.minLength(8),\n          Validators.maxLength(50)\n        ]))\n\n      }\n    })\n  }\n\n  submitForm(): void {\n    this.isSubmitting = true;\n    const credentials = this.authForm.value\n    this.usuarioService\n      .attemptAuth(this.authType, credentials)\n      .subscribe({\n          next: (response) => {\n            this.router.navigateByUrl('/')\n          },\n          error: (error) => this.isSubmitting = false\n        }\n      );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}