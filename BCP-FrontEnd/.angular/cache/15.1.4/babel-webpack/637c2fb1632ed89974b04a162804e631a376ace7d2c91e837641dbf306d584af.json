{"ast":null,"code":"import { environment } from '../../../environments/enviroment';\nimport { HttpParams } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  showErrors(error) {\n    return throwError(() => error.message);\n  }\n  get(path, params = new HttpParams()) {\n    return this.http.get(`${environment.api_url}${path}`, {\n      params\n    }).pipe(catchError(this.showErrors));\n  }\n  put(path, body = {}) {\n    return this.http.put(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.showErrors));\n  }\n  post(path, body = {}) {\n    return this.http.post(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.showErrors));\n  }\n  delete(path) {\n    return this.http.delete(`${environment.api_url}${path}`).pipe(catchError(this.showErrors));\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,QAAQ,kCAAkC;AAC9D,SAAuCC,UAAU,QAAO,sBAAsB;AAC9E,SAASC,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;AAKzD,OAAM,MAAOC,UAAU;EACrBC,YACmBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EACpB;EAEKC,UAAU,CAAEC,KAAwB;IAC1C,OAAOL,UAAU,CAAC,MAAMK,KAAK,CAACC,OAAO,CAAC;EACxC;EAEAC,GAAG,CAAKC,IAAY,EAAEC,SAAqB,IAAIX,UAAU,EAAE;IACzD,OAAO,IAAI,CAACK,IAAI,CACbI,GAAG,CAAc,GAAGV,WAAW,CAACa,OAAO,GAAGF,IAAI,EAAE,EAAE;MAAEC;IAAM,CAAE,CAAC,CAC7DE,IAAI,CAACZ,UAAU,CAAC,IAAI,CAACK,UAAU,CAAC,CAAC;EACtC;EAEAQ,GAAG,CAAKJ,IAAY,EAAEK,OAAe,EAAE;IACrC,OAAO,IAAI,CAACV,IAAI,CAACS,GAAG,CAClB,GAAGf,WAAW,CAACa,OAAO,GAAGF,IAAI,EAAE,EAC/BM,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CACrB,CAACF,IAAI,CAACZ,UAAU,CAAC,IAAI,CAACK,UAAU,CAAC,CAAC;EACrC;EAEAY,IAAI,CAAKR,IAAY,EAAEK,OAAe,EAAE;IACtC,OAAO,IAAI,CAACV,IAAI,CAACa,IAAI,CACnB,GAAGnB,WAAW,CAACa,OAAO,GAAGF,IAAI,EAAE,EAC/BM,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CACrB,CAACF,IAAI,CAACZ,UAAU,CAAC,IAAI,CAACK,UAAU,CAAC,CAAC;EACrC;EAEAa,MAAM,CAAET,IAAY;IAClB,OAAO,IAAI,CAACL,IAAI,CAACc,MAAM,CACrB,GAAGpB,WAAW,CAACa,OAAO,GAAGF,IAAI,EAAE,CAChC,CAACG,IAAI,CAACZ,UAAU,CAAC,IAAI,CAACK,UAAU,CAAC,CAAC;EACrC;;AAjCWH,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAiB,SAAVjB,UAAU;AAAA","names":["environment","HttpParams","catchError","throwError","ApiService","constructor","http","showErrors","error","message","get","path","params","api_url","pipe","put","body","JSON","stringify","post","delete","factory"],"sourceRoot":"","sources":["F:\\Development\\Technical Test\\BCP\\BCP-FrontEnd\\src\\app\\core\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core'\r\nimport { environment } from '../../../environments/enviroment'\r\nimport {HttpClient, HttpErrorResponse, HttpParams} from '@angular/common/http'\r\nimport { catchError, Observable, throwError } from 'rxjs'\r\nimport Swal from 'sweetalert2'\r\nimport { Response } from '../models'\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n  constructor (\r\n    private readonly http: HttpClient\r\n  ) {}\r\n\r\n  private showErrors (error: HttpErrorResponse): Observable<never> {\r\n    return throwError(() => error.message)\r\n  }\r\n\r\n  get<T> (path: string, params: HttpParams = new HttpParams()): Observable<Response<T>> {\r\n    return this.http\r\n      .get<Response<T>>(`${environment.api_url}${path}`, { params })\r\n      .pipe(catchError(this.showErrors))\r\n  }\r\n\r\n  put<T> (path: string, body: Object = {}): Observable<Response<T>> {\r\n    return this.http.put<Response<T>>(\r\n      `${environment.api_url}${path}`,\r\n      JSON.stringify(body)\r\n    ).pipe(catchError(this.showErrors))\r\n  }\r\n\r\n  post<T> (path: string, body: Object = {}): Observable<Response<T>> {\r\n    return this.http.post<Response<T>>(\r\n      `${environment.api_url}${path}`,\r\n      JSON.stringify(body)\r\n    ).pipe(catchError(this.showErrors))\r\n  }\r\n\r\n  delete (path: string): Observable<Response<string>> {\r\n    return this.http.delete<Response<string>>(\r\n      `${environment.api_url}${path}`\r\n    ).pipe(catchError(this.showErrors))\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}