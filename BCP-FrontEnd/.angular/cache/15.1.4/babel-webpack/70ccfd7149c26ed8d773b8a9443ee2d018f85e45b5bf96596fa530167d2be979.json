{"ast":null,"code":"import { environment } from '../../../environments/enviroment';\nimport { HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./swal.service\";\nexport class ApiService {\n  constructor(http, swal) {\n    this.http = http;\n    this.swal = swal;\n  }\n  get(path, params = new HttpParams()) {\n    return this.http.get(`${environment.api_url}${path}`, {\n      params\n    }).pipe(catchError(this.swal.showErrors)).subscribe({\n      next: response => {\n        this.swal.showMessage(response);\n        return response.data;\n      }\n    });\n  }\n  put(path, body = {}) {\n    return this.http.put(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.swal.showErrors));\n  }\n  post(path, body = {}) {\n    return this.http.post(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.swal.showErrors));\n  }\n  delete(path) {\n    return this.http.delete(`${environment.api_url}${path}`).pipe(catchError(this.swal.showErrors));\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SwalService));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAQA,WAAW,QAAO,kCAAkC;AAC5D,SAAoBC,UAAU,QAAO,sBAAsB;AAC3D,SAAQC,UAAU,QAAmB,MAAM;;;;AAK3C,OAAM,MAAOC,UAAU;EACrBC,YACmBC,IAAgB,EAChBC,IAAiB;IADjB,SAAI,GAAJD,IAAI;IACJ,SAAI,GAAJC,IAAI;EAEvB;EAEAC,GAAG,CAAIC,IAAY,EAAEC,SAAqB,IAAIR,UAAU,EAAE;IACxD,OAAO,IAAI,CAACI,IAAI,CACbE,GAAG,CAAc,GAAGP,WAAW,CAACU,OAAO,GAAGF,IAAI,EAAE,EAAE;MAACC;IAAM,CAAC,CAAC,CAC3DE,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,IAAI,CAACM,UAAU,CAAC,CAAC,CACtCC,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACT,IAAI,CAACU,WAAW,CAACD,QAAQ,CAAC;QAC/B,OAAOA,QAAQ,CAACE,IAAI;MACtB;KACD,CAAC;EACN;EAEAC,GAAG,CAAIV,IAAY,EAAEW,OAAe,EAAE;IACpC,OAAO,IAAI,CAACd,IAAI,CAACa,GAAG,CAClB,GAAGlB,WAAW,CAACU,OAAO,GAAGF,IAAI,EAAE,EAC/BY,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CACrB,CAACR,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,IAAI,CAACM,UAAU,CAAC,CAAC;EAC1C;EAEAU,IAAI,CAAId,IAAY,EAAEW,OAAe,EAAE;IACrC,OAAO,IAAI,CAACd,IAAI,CAACiB,IAAI,CACnB,GAAGtB,WAAW,CAACU,OAAO,GAAGF,IAAI,EAAE,EAC/BY,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CACrB,CAACR,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,IAAI,CAACM,UAAU,CAAC,CAAC;EAC1C;EAEAW,MAAM,CAACf,IAAY;IACjB,OAAO,IAAI,CAACH,IAAI,CAACkB,MAAM,CACrB,GAAGvB,WAAW,CAACU,OAAO,GAAGF,IAAI,EAAE,CAChC,CAACG,IAAI,CAACT,UAAU,CAAC,IAAI,CAACI,IAAI,CAACM,UAAU,CAAC,CAAC;EAC1C;;AArCWT,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAqB,SAAVrB,UAAU;AAAA","names":["environment","HttpParams","catchError","ApiService","constructor","http","swal","get","path","params","api_url","pipe","showErrors","subscribe","next","response","showMessage","data","put","body","JSON","stringify","post","delete","factory"],"sourceRoot":"","sources":["F:\\Development\\Technical Test\\BCP\\BCP-FrontEnd\\src\\app\\core\\services\\api.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core'\r\nimport {environment} from '../../../environments/enviroment'\r\nimport {HttpClient, HttpParams} from '@angular/common/http'\r\nimport {catchError, Observable} from 'rxjs'\r\nimport {Response} from '../models'\r\nimport {SwalService} from \"./swal.service\";\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n  constructor(\r\n    private readonly http: HttpClient,\r\n    private readonly swal: SwalService\r\n  ) {\r\n  }\r\n\r\n  get<T>(path: string, params: HttpParams = new HttpParams()): Observable<Response<T>> {\r\n    return this.http\r\n      .get<Response<T>>(`${environment.api_url}${path}`, {params})\r\n      .pipe(catchError(this.swal.showErrors))\r\n      .subscribe({\r\n        next: (response) => {\r\n          this.swal.showMessage(response)\r\n          return response.data\r\n        }\r\n      })\r\n  }\r\n\r\n  put<T>(path: string, body: Object = {}): Observable<Response<T>> {\r\n    return this.http.put<Response<T>>(\r\n      `${environment.api_url}${path}`,\r\n      JSON.stringify(body)\r\n    ).pipe(catchError(this.swal.showErrors))\r\n  }\r\n\r\n  post<T>(path: string, body: Object = {}): Observable<Response<T>> {\r\n    return this.http.post<Response<T>>(\r\n      `${environment.api_url}${path}`,\r\n      JSON.stringify(body)\r\n    ).pipe(catchError(this.swal.showErrors))\r\n  }\r\n\r\n  delete(path: string): Observable<Response<string>> {\r\n    return this.http.delete<Response<string>>(\r\n      `${environment.api_url}${path}`\r\n    ).pipe(catchError(this.swal.showErrors))\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}